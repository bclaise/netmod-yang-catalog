module module-metadata {
  namespace "https://yangcatalog.org/yang";
  prefix mod-meta;

  import yang-catalog {
    prefix yc;
  }
  import ietf-yang-library {
    prefix yanglib;
  }
  import ietf-yang-types {
    prefix yang;
  }
  organization
    "yangcatalog.org";
  contact
    "Yang Catalog <info@yangcatalog.org>";
  description
    "This module describes the API input needed to upload metadata to the
     yangcatalog.org catalog.";

  revision 2017-07-07 {
    description
      "Initial revision.";
    reference
      "YANG Catalog <https://yangcatalog.org>";
  }

  container modules {
    description
      "Container for a list of modules for which metadata is being provided.";
    list module {
      key "name revision";
      description
        "List of modules for which metadata is being provided.";
      leaf name {
        type yang:yang-identifier;
        description
          "The YANG module or submodule name.";
      }
      leaf revision {
        type union {
          type yanglib:revision-identifier;
          type string { length 0; }
        }
        description
          "The YANG module or submodule revision date.
           A zero-length string is used if no revision statement
           is present in the YANG module or submodule.";
      }
      leaf organization {
        type string;
        description
          "This statement defines the party responsible for this
           module.  The argument is a string that is used to specify a textual
           description of the organization(s) under whose auspices this module
           was developed.";
      }
      leaf conformance-type {
        type enumeration {
          enum implement {
            description
              "Indicates that the server implements one or more
               protocol-accessible objects defined in the YANG module
               identified in this entry.  This includes deviation
               statements defined in the module.

               For YANG version 1.1 modules, there is at most one
               module entry with conformance type 'implement' for a
               particular module name, since YANG 1.1 requires that,
               at most, one revision of a module is implemented.

               For YANG version 1 modules, there SHOULD NOT be more
               than one module entry for a particular module name.";
          }
          enum import {
            description
              "Indicates that the server imports reusable definitions
               from the specified revision of the module but does
               not implement any protocol-accessible objects from
               this revision.

               Multiple module entries for the same module name MAY
               exist.  This can occur if multiple modules import the
               same module but specify different revision dates in
               the import statements.";
          }
        }
        mandatory true;
        description
          "Indicates the type of conformance the server is claiming
           for the YANG module identified by this entry.";
      }

      leaf maturity-level {
        type enumeration {
          enum ratified {
            value 0;
            description
              "Maturity of a module that is fully approved (e.g., a standard).";
          }
          enum working-group {
            value 1;
            description
              "Maturity of a module that is actively being developed by a organization towards ratification.";
          }
          enum individual {
            value 2;
            description
              "Maturity of a module that has been initially created, but has no official
               organization-level status.";
          }
        }
        description
          "The current maturity of the module with respect to the body that created it.
           This allows one to understand where the module is in its overall life cycle.";
      }
      leaf document-name {
        type string;
          description
            "The name of the document from which the module was extracted or taken;
             or that provides additional context about the module.";
      }
      leaf author-email {
        type yc:email-address;
        description
          "Contact email of the author who is responsible for this module.";
      }
      leaf reference {
        type string;
          description
            "A string that is used to specify a textual cross-reference to an external document, either
             another module that defines related management information, or a document that provides
             additional information relevant to this definition.";
      }
      container source-file {
        leaf repo {
          type yc:url;
          description
            "URI location of the version control system repository.";
        }
        leaf owner {
          type string;
          description
            "Username or ID of the owner of the version control system repository.";
        }
        leaf path {
          type yc:path;
          description
            "Location within the repository of the module file.";
        }
        description
          "Networked version control system location of the module file.";
      }
      container organization-specific-metadata {
        description
          "Container for organization-specific data.";
        uses yc:organization-specific-metadata;
      }
    }
  }
}
